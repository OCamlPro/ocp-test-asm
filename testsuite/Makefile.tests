SUBSETS=all exceptions arrays gc checkbound int64
all_NTESTS=35
all_LOGS= test1.log test2.log test3.log test4.log test5.log test6.log test7.log test8.log test9.log test10.log test11.log test12.log test13.log test14.log test15.log test16.log test17.log test18.log test19.log test20.log test21.log test22.log test23.log test24.log test25.log test26.log test27.log test28.log test29.log test30.log test31.log test32.log test33.log test34.log test35.log
exceptions_LOGS=test11.log test12.log test13.log test14.log
exceptions_NTESTS=4
arrays_LOGS=test15.log test16.log test17.log test18.log test19.log test20.log test21.log
arrays_NTESTS=7
gc_LOGS=test22.log test23.log test24.log
gc_NTESTS=3
checkbound_LOGS=test25.log test26.log test27.log test28.log test29.log test30.log test31.log test32.log test33.log
checkbound_NTESTS=9
int64_LOGS=test34.log test35.log
int64_NTESTS=2

# from files/Makefile.trailer

# Use 'Makefile.config' to configure for your host

# Set KIND to 'byte' to test in bytecode instead of native code
KIND ?= asm
# Set FAST to 'true' to use ocamlopt.opt
FAST ?= false
# Set SUBSET to a set of tests to avoid running all tests
SUBSET ?= all

-include Makefile.config

RESULT ?= result
#CMP could also be 'diff -q'
CMP ?= cmp
ECHO_NONL ?= echo -n
NONL ?=

ifneq ($(OCAMLDIR),)
OCAMLRUN:=${OCAMLDIR}/byterun/ocamlrun
endif

ifeq ($(FAST),true)
MAYBE_OPT:=.opt
OCAMLRUN:=
endif

byte_COMPILER:=ocamlc${MAYBE_OPT}
asm_COMPILER:=ocamlopt${MAYBE_OPT}

# you can set other compilers:
ifeq ($(OCAMLDIR),)
$(KIND)_CC ?= $($(KIND)_COMPILER)
else
${KIND}_CC ?= ${OCAMLRUN} ${OCAMLDIR}/${${KIND}_COMPILER} -I ${PREFIX}/${KIND}run -I ${PREFIX}/stdlib
endif

asm_COMP := -S -verbose -g -nostdlib -nopervasives
asm_LINK := -S -verbose -g
asm_DUMP := -S -dcmm -dsel -dcombine -dlive -dspill -dinterf -dprefer -dalloc -dreload -dscheduling -dlinear
asm_UNIT :=cmx
asm_PROG :=asm

byte_COMP := -verbose -g -nostdlib -nopervasives
byte_LINK := -verbose -g
byte_DUMP := -dlambda
byte_UNIT:=cmo
byte_PROG:=byte

all:
	@echo '---------------------------------------'
	@echo Testing SUBSET=$(SUBSET)
	@echo 'Use [make SUBSET=xxx] to test another one'
	@echo 'Available subsets: ${SUBSETS}'
	@echo 'OCAMLDIR=${OCAMLDIR} # sources of compiler if not installed'
	@echo 'FAST=${FAST} # false/true to use .opt compiler'
	@echo 'KIND=${KIND} # asm/byte to test bytecode'
	@echo '---------------------------------------'
	$(MAKE) -f Makefile.tests --no-print-directory clean
	$(MAKE) -f Makefile.tests --no-print-directory std_exit
	$(MAKE) -f Makefile.tests --no-print-directory results

byte:
	$(MAKE) -f Makefile.tests KIND=byte
opt:
	$(MAKE) -f Makefile.tests KIND=asm

update-references:
	$(MAKE) -f Makefile.tests clean
	$(MAKE) -f Makefile.tests RESULT=reference

clean:
	rm -f *.byte || echo No byte programs
	rm -f *.asm || echo No asm programs
	rm -f *.cm? *.o *.result *.log *.s

std_exit:
	@echo > std_exit.ml
	$($(KIND)_CC) -c std_exit.ml

results: $($(SUBSET)_LOGS)
	@echo "Compiling results in testsuite.log for subset '$(SUBSET)'"
	@echo Testsuite results > testsuite.log
	@for file in $($(SUBSET)_LOGS); do \
	  echo "--------------------- $$file --------------------" \
	    >> testsuite.log; \
	  cat $$file >> testsuite.log; \
	  echo >> testsuite.log; \
	done;
	@grep TEST testsuite.log
	@$(ECHO_NONL) "Tests OK (on $($(SUBSET)_NTESTS) tests): $(NONL)"
	@grep 'PASSED TEST' testsuite.log | wc -l
	@$(ECHO_NONL) "Tests KO (on $($(SUBSET)_NTESTS) tests): $(NONL)"
	@grep 'FAILED TEST' testsuite.log | wc -l

.SUFFIXES: .ml .exec .cmm .log

.ml.exec:
	@echo Test `cat $*.name` = $*
	@echo Compiling $*:
	rm -f $*.$($(KIND)_PROG)
	rm -f $*.cm?
	rm -f $*.o
	$($(KIND)_CC) $($(KIND)_COMP) -c $*.mli
	$($(KIND)_CC) $($(KIND)_COMP) -c $*.ml
	$($(KIND)_CC) $($(KIND)_LINK) -o $*.$($(KIND)_PROG) $*.$($(KIND)_UNIT)
	@echo Executing test2:
	echo './$*.$($(KIND)_PROG) > $*.$(RESULT)'
	@./$*.$($(KIND)_PROG) > $*.$(RESULT) || echo execution failed
	@if $(CMP) $*.$(RESULT) $*.reference; then echo PASSED TEST $* `cat $*.name`; else echo FAILED TEST $* `cat $*.name` '(by diff, cat $*.log)'; fi

.ml.cmm:
	$($(KIND)_CC) $($(KIND)_COMP) -c $*.mli
	$($(KIND)_CC) $($(KIND)_COMP) $($(KIND)_DUMP) -c $*.ml 2> $*.cmm
	cat $*.s >> $*.cmm

.ml.log:
	@echo 'make -f Makefile.tests $*.exec > $*.log'
	@$(MAKE) -f Makefile.tests --no-print-directory $*.exec > $*.log 2>&1 || echo FAILED TEST $*  `cat $*.name` '(by error status: cat $*.log)'>> $*.log

